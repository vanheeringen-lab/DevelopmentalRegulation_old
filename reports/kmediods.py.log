Traceback (most recent call last):
  File "/usr/share/miniconda/envs/DevelopmentalRegulation/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/DevelopmentalRegulation/lib/python3.8/site-packages/nbclient/client.py", line 1082, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/DevelopmentalRegulation/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/envs/DevelopmentalRegulation/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/envs/DevelopmentalRegulation/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/DevelopmentalRegulation/lib/python3.8/site-packages/nbclient/client.py", line 535, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/DevelopmentalRegulation/lib/python3.8/site-packages/nbclient/client.py", line 827, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/share/miniconda/envs/DevelopmentalRegulation/lib/python3.8/site-packages/nbclient/client.py", line 735, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import matplotlib.gridspec as gridspec

# gridspec inside gridspec
f = plt.figure(figsize=(40, 20))

ncols = 4
nrows = len(dfs) // ncols
gs = gridspec.GridSpec(nrows, ncols, figure=f)

nclusters = 5

for i in range(ncols * nrows):
    if i < len(dfs):
        assembly, df = list(dfs.items())[i]
        df = df.subtract(df.mean(axis=1), axis=0)    

        # k-mediods
        corr = df.transpose().corr(method="pearson").values
        sil_score_max = -1
        for n_clusters in range(5,20):
            kmeans = KMedoids(n_clusters=n_clusters, init="k-medoids++").fit(corr)
            labels = kmeans.labels_
            sil_score = silhouette_score(corr, labels)
            if sil_score > sil_score_max:
                sil_score_max = sil_score
                best_n_clusters = n_clusters

        kmeans = KMeans(n_clusters=best_n_clusters).fit(df)
        df["cluster"] = kmeans.labels_

        mid_vals = [np.mean(np.argmin(df[df["cluster"] == cluster].drop(columns=["cluster"]).values ** 2, axis=1)) for cluster in range(best_n_clusters)]
        start_vals = [np.mean(df[df["cluster"] == cluster][df.columns[0]]) > 0 for cluster in range(best_n_clusters)]

        cluster_order = sorted(range(best_n_clusters), key=lambda e: (start_vals[e], -mid_vals[e]), reverse=True)
        label_counts = [sum(df["cluster"] == cluster) for cluster in cluster_order]

        bigax = gridspec.GridSpecFromSubplotSpec(best_n_clusters, 1, subplot_spec=gs[i], height_ratios=label_counts)

        vmax = (max([np.min(df.drop(columns=["cluster"]).values)**2, np.max(df.drop(columns=["cluster"]).values)**2]))**0.5
        vmin = -vmax
        for i, cluster in enumerate(cluster_order):
            smallax = f.add_subplot(bigax[i, :])
            im = smallax.pcolor(df[df["cluster"] == cluster].drop(columns=["cluster"]), 
                                      vmin=vmin, 
                                      vmax=vmax,
                                      cmap="RdYlGn_r")
            smallax.get_xaxis().set_visible(False)
            smallax.get_yaxis().set_visible(False)

            if i == 0:
                smallax.set_title(f"{util.ass2name(assembly)}")
    else:
        ax = gs[i]
        ax.axis('off')


plt.plot()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-3-ad1d9ed59f5b>[0m in [0;36m<module>[0;34m[0m
[1;32m     26[0m                 [0mbest_n_clusters[0m [0;34m=[0m [0mn_clusters[0m[0;34m[0m[0;34m[0m[0m
[1;32m     27[0m [0;34m[0m[0m
[0;32m---> 28[0;31m         [0mkmeans[0m [0;34m=[0m [0mKMeans[0m[0;34m([0m[0mn_clusters[0m[0;34m=[0m[0mbest_n_clusters[0m[0;34m)[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mdf[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     29[0m         [0mdf[0m[0;34m[[0m[0;34m"cluster"[0m[0;34m][0m [0;34m=[0m [0mkmeans[0m[0;34m.[0m[0mlabels_[0m[0;34m[0m[0;34m[0m[0m
[1;32m     30[0m [0;34m[0m[0m

[0;31mNameError[0m: name 'KMeans' is not defined
NameError: name 'KMeans' is not defined

